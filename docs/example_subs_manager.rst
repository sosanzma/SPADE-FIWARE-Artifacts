Use Case Guide for SPADE-FIWARE-Artifacts `SubscriptionManagerArtifact`
==========================================================

Introduction
------------

This guide provides an explanation of how to use the `SubscriptionManagerArtifact` example, which is designed to interact with a FIWARE Context Broker through subscriptions. The example showcases a subscription manager artifact that handles the subscriptions and an agent that listens for incoming notifications. The core functionality revolves around the `SubscriptionManagerArtifact` class and how it can be used to manage subscriptions in the FIWARE environment, as well as an associated configuration file (`config.json`).

Example Structure
-----------------

The example consists of the following files:

1. ``notification_agent.py``: The main script demonstrating the use of the subscription manager artifact and agent.
2. ``config.json``: Configuration file for system parameters.

Detailed Code Explanation
-------------------------

``subscription_manager_example.py``
^^^^^^^^^^^^^^^^^^^^^^^^^

This file contains the implementation of the ``SubscriptionManagerArtifact`` class, along with an agent (`Agent_notification`) that listens to the notifications generated by the subscriptions managed by the artifact.

``SubscriptionManagerArtifact``
""""""""""""""""""""""""""""""

This class extends ``spade_artifact.Artifact`` and is responsible for managing subscriptions to the FIWARE Context Broker. It provides a set of tools to create, delete, and manage subscriptions, as well as to handle incoming notifications.

- **Attributes**:
  - ``broker_url``: The URL of the Context Broker to interact with.
  - ``recent_notifications``: Stores the latest notifications received from the broker.
  - ``watched_attributes``: Attributes that are monitored for changes.

- **Key Methods**:
  - ``create_subscription``: Sends a POST request to create a subscription in the Context Broker. This method is used to register interest in certain entities or attributes, which will then trigger notifications when changes occur.
  - ``handle_notification``: Processes incoming notifications and logs the filtered data. This method also allows the artifact to publish notifications to any agent focused on the artifact.
  - ``get_active_subscriptions``: Retrieves the list of active subscriptions from the Context Broker. This can be used to verify the current state of subscriptions and manage them accordingly.
  - ``delete_subscription``: Deletes an active subscription in the Context Broker based on its ID. This helps in managing and removing outdated or unnecessary subscriptions.
  - ``review_and_delete_subscriptions``: Provides an interactive way for users to review active subscriptions and delete them if necessary.

- **Run Loop**:
  The ``run()`` method starts a local web server to handle incoming notifications and allows user interaction to manage subscriptions. This server listens for incoming HTTP POST requests from the Context Broker, which are triggered whenever an event of interest occurs.

- **Notification Handling**:
  The artifact runs a local server that receives notifications from the Context Broker, processes them, and provides real-time updates through the subscribed agent. This makes it a powerful tool for monitoring changes in entities registered within FIWARE.

``Agent_notification``
""""""""""""""""""""""

This class, which extends both ``ArtifactMixin`` and ``Agent`` from the SPADE framework, listens for notifications from the subscription manager artifact.

- **Initialization**:
  - The ``artifact_jid`` attribute is used to specify the artifact to be observed.
  - The ``artifact_callback`` method is triggered whenever the artifact sends a notification.

- **Setup**:
  - The agent subscribes to the artifact's presence and sets itself as available.
  - The artifact focus is set on the ``artifact_jid``, allowing the agent to receive notifications.

``main`` Function
"""""""""""""""""

.. code-block:: python

    async def main():
        with open('config.json', 'r') as config_file:
            config = json.load(config_file)

        XMPP_SERVER = config["XMPP_SERVER"]
        broker_port = config["broker_port"]
        subscriber_artifact_name = config["subscriber_artifact_name"]
        subscriber_artifact_jid = f"{subscriber_artifact_name}@{XMPP_SERVER}"
        subscriber_artifact_passwd = getpass(prompt="Password for publisher artifact> ")

        artifact = SubscriptionManagerArtifact(subscriber_artifact_jid, subscriber_artifact_passwd, broker_url=broker_port)

        agent_jid = f"agent_notification@{XMPP_SERVER}"
        agent_passwd  = getpass(prompt="Password for agent who receives the notification> ")

        try:
            await artifact.start()
            agent = Agent_notification(jid=agent_jid, password=agent_passwd, artifact_jid=subscriber_artifact_jid)
            await agent.start()
            await artifact.join()
            await artifact.stop()
            await agent.stop()
        except Exception as e:
            logger.error(f"An error occurred in the main function: {str(e)}")

This function sets up the artifact and the agent, starting them and managing their lifecycle.

Configuration File
------------------

``config.json``
^^^^^^^^^^^^^^^

.. code-block:: json

    {
        "XMPP_SERVER": "YOUR_XMMPP_SERVER_NAME",
        "broker_port": "http://BROKERPORT:9090",
        "subscriber_artifact_name": "subscriber_artifact_name"
    }

This file contains the configuration for the system, including:

- **``XMPP_SERVER``**: Address of the XMPP server for communication.
- **``broker_port``**: The Context Broker URL used by the subscription manager artifact.
- **``subscriber_artifact_name``**: Name for the artifact responsible for managing subscriptions.

How to Use
----------

1. **Setup**: Ensure you have all required dependencies installed, including ``aiohttp``, ``spade``, and ``loguru``, and that the FIWARE Context Broker is running.

2. **Configuration**:
   - Modify ``config.json`` to match your server and broker settings.

3. **Run the Script**: Execute ``notification_agent.py``. You will be prompted to enter passwords for both the agent and the subscription artifact.

4. **Interact**: The artifact will automatically start and listen for notifications from the Context Broker. You can monitor the console output for incoming notifications or any errors.

Customization
-------------

- **Data Source**: Modify the ``SubscriptionManagerArtifact`` to watch for different types of entities or to use a different notification endpoint.

- **Notification Processing**: Customize the ``handle_notification()`` method to process notifications according to your application's requirements.

- **Attributes Watched**: The ``watched_attributes`` list can be modified to include the attributes you are specifically interested in receiving.

- **Q Filter Options**: Use the q filter to apply conditions on attributes when creating a subscription. This allows you to receive notifications only when specific criteria are met, such as ``fillingLevel>0.7 or status==active``. Modify the subscription data to include a q parameter with the desired conditions to filter the notifications effectively.

Troubleshooting
---------------

- **Ensure JSON Formatting**: Verify that ``config.json`` is correctly formatted.
- **Connectivity Issues**: Check that the XMPP server and Context Broker are accessible from the machine running the script.
- **Artifact Subscription**: Ensure that the agent is correctly focused on the artifact to receive notifications.

Conclusion
----------

The ``SubscriptionManagerArtifact`` example demonstrates how to utilize SPADE-FIWARE artifacts to manage subscriptions and handle notifications from a FIWARE Context Broker. With this guide, you should be able to understand, run, and customize the code to suit your specific needs for data monitoring and notification management.
